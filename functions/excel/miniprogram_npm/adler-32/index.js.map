{"version":3,"sources":["adler32.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/* adler32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported ADLER32 */\nvar ADLER32;\n(function (factory) {\n\t/*jshint ignore:start */\n\t/*eslint-disable */\n\tif(typeof DO_NOT_EXPORT_ADLER === 'undefined') {\n\t\tif('object' === typeof exports) {\n\t\t\tfactory(exports);\n\t\t} else if ('function' === typeof define && define.amd) {\n\t\t\tdefine(function () {\n\t\t\t\tvar module = {};\n\t\t\t\tfactory(module);\n\t\t\t\treturn module;\n\t\t\t});\n\t\t} else {\n\t\t\tfactory(ADLER32 = {});\n\t\t}\n\t} else {\n\t\tfactory(ADLER32 = {});\n\t}\n\t/*eslint-enable */\n\t/*jshint ignore:end */\n}(function(ADLER32) {\nADLER32.version = '1.2.0';\nfunction adler32_bstr(bstr, seed) {\n\tvar a = 1, b = 0, L = bstr.length, M = 0;\n\tif(typeof seed === 'number') { a = seed & 0xFFFF; b = seed >>> 16; }\n\tfor(var i = 0; i < L;) {\n\t\tM = Math.min(L-i, 3850)+i;\n\t\tfor(;i<M;i++) {\n\t\t\ta += bstr.charCodeAt(i)&0xFF;\n\t\t\tb += a;\n\t\t}\n\t\ta = (15*(a>>>16)+(a&65535));\n\t\tb = (15*(b>>>16)+(b&65535));\n\t}\n\treturn ((b%65521) << 16) | (a%65521);\n}\n\nfunction adler32_buf(buf, seed) {\n\tvar a = 1, b = 0, L = buf.length, M = 0;\n\tif(typeof seed === 'number') { a = seed & 0xFFFF; b = (seed >>> 16) & 0xFFFF; }\n\tfor(var i = 0; i < L;) {\n\t\tM = Math.min(L-i, 3850)+i;\n\t\tfor(;i<M;i++) {\n\t\t\ta += buf[i]&0xFF;\n\t\t\tb += a;\n\t\t}\n\t\ta = (15*(a>>>16)+(a&65535));\n\t\tb = (15*(b>>>16)+(b&65535));\n\t}\n\treturn ((b%65521) << 16) | (a%65521);\n}\n\nfunction adler32_str(str, seed) {\n\tvar a = 1, b = 0, L = str.length, M = 0, c = 0, d = 0;\n\tif(typeof seed === 'number') { a = seed & 0xFFFF; b = seed >>> 16; }\n\tfor(var i = 0; i < L;) {\n\t\tM = Math.min(L-i, 3850);\n\t\twhile(M>0) {\n\t\t\tc = str.charCodeAt(i++);\n\t\t\tif(c < 0x80) { a += c; }\n\t\t\telse if(c < 0x800) {\n\t\t\t\ta += 192|((c>>6)&31);             b += a; --M;\n\t\t\t\ta += 128|(c&63);\n\t\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++) & 1023;\n\t\t\t\ta += 240|((c>>8)&7);              b += a; --M;\n\t\t\t\ta += 128|((c>>2)&63);             b += a; --M;\n\t\t\t\ta += 128|((d>>6)&15)|((c&3)<<4);  b += a; --M;\n\t\t\t\ta += 128|(d&63);\n\t\t\t} else {\n\t\t\t\ta += 224|((c>>12)&15);            b += a; --M;\n\t\t\t\ta += 128|((c>>6)&63);             b += a; --M;\n\t\t\t\ta += 128|(c&63);\n\t\t\t}\n\t\t\tb += a; --M;\n\t\t}\n\t\ta = (15*(a>>>16)+(a&65535));\n\t\tb = (15*(b>>>16)+(b&65535));\n\t}\n\treturn ((b%65521) << 16) | (a%65521);\n}\n// $FlowIgnore\nADLER32.bstr = adler32_bstr;\n// $FlowIgnore\nADLER32.buf = adler32_buf;\n// $FlowIgnore\nADLER32.str = adler32_str;\n}));\n"]}